# -*- coding: utf-8 -*-

"""
Anki Add-on: Create Duplicate Notes 

Select any number of cards in the card browser and duplicate their notes

Copyright: Glutanimate 2016
Based on: "Create Copy of Selected Cards" by Kealan Hobelmann (https://ankiweb.net/shared/info/787914845)
License: GNU GPL, version 3 or later; http://www.gnu.org/copyleft/gpl.html

To use:

1) Open the card browser
2) Select the desired cards
3) Press CTRL+ALT+C or go to Edit > Duplicate Notes

A few pointers:

- All cards generated by each note will be duplicated alongside the note
- All duplicated cards will end up in the deck of the first selected cards
- The duplicated cards should look exactly like the originals
- Tags are preserved in the duplicated notes
- Review history is NOT duplicated to the new cards (they appear as new cards)
- The notes will be marked as duplicates (because they are!)
"""

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from anki.hooks import addHook
from aqt import mw
from aqt.utils import tooltip
from anki.utils import timestampID

def createDuplicate(browser):
    # Get deck of first selected card
    cids = browser.selectedCards()
    if not cids:
        tooltip(_("No cards selected."), period=2000)
        return
    did = mw.col.db.scalar(
        "select did from cards where id = ?", cids[0])
    deck = mw.col.decks.get(did)
    if deck['dyn']:
        tooltip(_("Cards can't be duplicated when they are in a filtered deck."), period=2000)
        return
    
    mw.progress.start()

    # Copy notes
    for nid in browser.selectedNotes():
        # print "Found note: %s" % (nid)
        note = mw.col.getNote(nid)
        model = note._model
        
        # Assign model to deck
        mw.col.decks.select(deck['id'])
        mw.col.decks.get(deck)['mid'] = model['id']
        mw.col.decks.save(deck)

        # Assign deck to model
        mw.col.models.setCurrent(model)
        mw.col.models.current()['did'] = deck['id']
        mw.col.models.save(model)
        
        # Create new note
        note_copy = mw.col.newNote()
        # Copy tags and fields (all model fields) from original note
        note_copy.tags = note.tags
        note_copy.fields = note.fields

        # Refresh note and add to database
        note_copy.flush()
        mw.col.addNote(note_copy)
        
    # Reset collection and main window
    mw.col.reset()
    mw.reset()

    mw.progress.finish()

    tooltip(_("Notes duplicated."), period=1000)
    
    
def setupMenu(browser):
    a = QAction("Create Duplicate", browser)
    a.setShortcut(QKeySequence("Ctrl+Alt+C"))
    browser.connect(a, SIGNAL("triggered()"), lambda e=browser: onCreateDuplicate(e))
    browser.form.menuEdit.addSeparator()
    browser.form.menuEdit.addAction(a)

def onCreateDuplicate(browser):
    createDuplicate(browser)

addHook("browser.setupMenus", setupMenu)
